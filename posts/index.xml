<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Chenhaoqing's Blog</title><link>https://chenhaoqing.github.io/posts/</link><description>Recent content in Posts on Chenhaoqing's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 11 Mar 2024 22:44:00 +0800</lastBuildDate><atom:link href="https://chenhaoqing.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>《高绩效教练》</title><link>https://chenhaoqing.github.io/posts/booknotes/2024/%E9%AB%98%E7%BB%A9%E6%95%88%E6%95%99%E7%BB%83/</link><pubDate>Mon, 11 Mar 2024 22:44:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/booknotes/2024/%E9%AB%98%E7%BB%A9%E6%95%88%E6%95%99%E7%BB%83/</guid><description>基本信息 《高绩效教练》
作者: [英]约翰.惠特默 出版社: 机械工业出版社 出版年: 2018-12-14
ISBN: 9787111614418
读后感 评分：4分（满分5分）
教你如何激发团队，激发被教练者。提供了一些方法论、一些话术。
摘抄记录 教练将人们的潜能释放出来，帮助他们达到最佳状态。
&amp;ldquo;马斯洛的需求层次&amp;rdquo; （从高到低）
自我实现 自尊 他人的尊重 归属 庇护与安全 食物和水 &amp;ldquo;自我觉察&amp;rdquo;：理解你为什么做你在做的事情 &amp;ldquo;察觉他人&amp;rdquo;：从一个人行为表现背后认识他 &amp;ldquo;组织觉察&amp;rdquo;：对组织文化产生积极的影响
教练方式尊重和重视个体，能够改善人际关系，提高工作敬业度，向员工发问的方式本身就体现了对他们和他们的答案的重视。如果只是说教，没有信息交换，就没有任何增值的产生。
创建觉察和责任感最有效的问题应以寻求量化或收集事实的词语开始，比如“什么”、“何时”“谁”“多少”。不建议使用“为什么”，因为它经常意味着批评并会引发防御心理。使用“为什么”和“如何”时，不合适的问题会引发分析性思考，这可能会适得其反。
开始的提问应该宽泛，然后逐渐聚焦于细节。
“GROW模型”
&amp;ldquo;Goal&amp;rdquo;，目标设定，你想要什么？ “Reality”，现状分析，你现在在哪里？ “Options”，方案选择，你能做什么？ “Will”，行动意愿，你将要做什么？ 一个好目标应具备的品质
“SMART” 具体的、可衡量的、一致同意的、现实的、有时限的
“PURE” 正向的陈述、能被理解的、相关的、道德的
“CLEAR” 挑战性的、合法的、环保的、适宜的、被记录的</description></item><item><title>《心若菩提》</title><link>https://chenhaoqing.github.io/posts/booknotes/2024/%E5%BF%83%E8%8B%A5%E8%8F%A9%E6%8F%90/</link><pubDate>Mon, 11 Mar 2024 22:37:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/booknotes/2024/%E5%BF%83%E8%8B%A5%E8%8F%A9%E6%8F%90/</guid><description>基本信息 《心若菩提（增订版）》
作者: 曹德旺 出版社: 人民出版社 出版年: 2020-10
ISBN: 9787010175157
读后感 评分：3.5分（满分5分）
讲解了曹总的发家成长经历，其中也包含了他对人情事故的一些看法、主张。</description></item><item><title>《风起陇西》</title><link>https://chenhaoqing.github.io/posts/booknotes/2024/%E9%A3%8E%E8%B5%B7%E9%99%87%E8%A5%BF/</link><pubDate>Mon, 11 Mar 2024 22:29:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/booknotes/2024/%E9%A3%8E%E8%B5%B7%E9%99%87%E8%A5%BF/</guid><description>基本信息 《风起陇西》
作者: 马伯庸
出版社: 湖南文艺出版社
出版年: 2017-10
ISBN: 978-7-5404-8285-5
读后感 评分：4分（满分5分）
（虚构）讲述了三国时期在秘密情报战线上的生死角逐故事。</description></item><item><title>《悖论13》</title><link>https://chenhaoqing.github.io/posts/booknotes/2023/%E6%82%96%E8%AE%BA13/</link><pubDate>Thu, 13 Apr 2023 23:11:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/booknotes/2023/%E6%82%96%E8%AE%BA13/</guid><description>基本信息 《悖论13》
作者: 东野圭吾
阅读方式：喜马拉雅-听书
读后感 评分：3.5分（满分5分）
继上次重新接触东叔的作品《无名之町》后，打铁趁热继续这一部《悖论13》。 ～～～～～～～～下述内容涉及剧透～～～～～～～～ 故事讲述在3月13日（也是我的一个纪念日，哈哈）13时13分13秒，世界会“神奇的”进入一个状态。 在临近结尾时，作者解释到是，在那一时间段（13时13分13秒～13时13分26秒），世界会进入“P13现象”。 世界为了避免出现此时间段开始与结束时不一致的“不合理”的情况，会将在该时间段死去的人“复制”到另一个平行世界中（也包括了植物、死去的动物等非生物）。 故事就是在这样的背景下，围绕在新世界中的13个人，探讨了如何能生存下来、该遵从什么法则等引人深思的问题。 印象深刻的几点：婴儿、壮年、老人、男人、女人、病人，在这样的一个世界上，是否拥有相同的权利与义务；</description></item><item><title>GPT-4</title><link>https://chenhaoqing.github.io/posts/ai/gpt-4/</link><pubDate>Sat, 01 Apr 2023 22:52:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/ai/gpt-4/</guid><description>导言 GPT-4是目前OpenAI最新发布的多模态大模型，支持文本、图像作为输入，以纯文本的形式(也包括以代码的形式)作为输出。模型的能力非常强悍，在部分场景下，已经可以达到甚至超过现实世界人的水平。官方中有个例子是：以排名TOP 10%的结果通过律师资格认证考试（GTP-3.5模型还无法通过）。
其实，GPT-4在2022年8月份就已经完成了训练，之后经历了近半年的测试调整后（涵盖安全、合规等方面），才在2023年3月份发布。
训练 OpenAI基于微软云搭建了超级计算集群用于模型训练，GPT-3.5是第一个在上面完成训练的模型。在训练GPT-3.5的过程中，他们发现并修复了一些问题。
和以往的GPT模型一样，它也是用预测文章中下一个词的方式去训练的，也就是Language Modeling Loss。
数据来源 训练数据有包括公开的数据，比如网络数据，也有购买的数据。有数学问题中的正确解和错误解，有弱推理也有强推理，有保持一致的也有互相矛盾的，也有多种意识形态。
因为数据集中既有正确的信息，也有异常的信息，所以预训练后的base模型回答结果和人们所预期的还有很大的差距，所以他们采用了RLHF来做align微调。
RLHF是用来控制模型更能知道用户问的是什么，用户更希望要的是什么。
可预测的扩展性 一般情况下，大模型的训练代价非常大，非常耗费时间。我们需要先在小模型或者较小的数据集上去做消融实验，看看哪个想法work了，然后再去大的模型上做实验。
但是对于语言模型，由于模型扩展得太大了，所以往往会出现即使在小模型中测试通过的想法，换到大模型中也无法work。而且，在大模型下的涌现能力，也是无法在小模型中观测到的。
但是，OpenAI表示，他们可以准确的预测GPT-4的训练结果。在小模型训练出来结果后，就可以预测出如果把计算成本扩大，这个模型最后的训练性能是怎样的。
能力 在目前的测试结果来看，GPT-4对文字类的测试成果优秀，在编码及数学计算上，表现一般。
GPT-4具备代码生成能力，有人用餐巾纸手画了一个网站草图作为输入，它就能生成相关代码，并可正常运行。
支持多种语言，包括英文、中文等26种。
视觉输入 GPT-4模型支持用户以图片、文字或两者相混的方式作为输入。
官方有个例子，GPT-4可以读取用户提供的图片（用VGA插头插入手机充电口），为用户解释这张图片的搞笑点。
可操纵性 在以往的模型中，只能用一个具有固定语气、风格的“人”来和用户交互。但是在GPT-4，允许通过配置的方式，在被允许的范围内，定制这个风格。
官方有个例子，可以给模型定义使用苏格拉底的风格来答复问题。
局限性 GPT-4还是会存在瞎编乱造、偏见的情况。 预训练的数据集是在2021年9月份之前的，但是在后续的微调版本中，不排除会加入新的数据集。 当前可以支持8192个Token的规模。（平均来说，一个英文单词会被分为1.3个Token，一个汉字会被分为2个Token）
参考来源 [1] https://www.youtube.com/watch?v=K0SZ9mdygTw&amp;amp;list=RDCMUC8WCW6C3BWLKSZ5cMzD8Gyw&amp;amp;index=1
[2] https://openai.com/research/gpt-4
[3] https://wanzhanyong.blog.caixin.com/archives/265251</description></item><item><title>《无名之町》</title><link>https://chenhaoqing.github.io/posts/booknotes/2023/%E6%97%A0%E5%90%8D%E4%B9%8B%E7%94%BA/</link><pubDate>Mon, 20 Mar 2023 23:25:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/booknotes/2023/%E6%97%A0%E5%90%8D%E4%B9%8B%E7%94%BA/</guid><description>基本信息 《无名之町》
作者: 东野圭吾
阅读方式：喜马拉雅-听书
读后感 评分：5分（满分5分）
很久没有看&amp;amp;听东叔的作品了，被“疫情下的谋杀案”字眼所吸引，开始在喜马拉雅上听起了这本书。
令人感动的是，东叔创造出了一个新的“破案侦探”。新的侦探是一位魔术师，在喜马拉雅配音演员的高超演绎下，我脑海中的他冷静、敏捷、有趣、抠搜。
故事的开头是发生了一起命案，由死者的弟弟（也就是新出现的魔术师侦探）完成了解题。在过程中，由于他没有警察身份，也不像汤川那样在警局有熟悉的人，他需要在警察、邻居、嫌疑人之间斗智斗勇，获取与案件相关的信息，在此过程中令我感受到他独特的魅力。
故事逻辑清晰，推演合理，刚听完就觉得后续还会继续买书来看。</description></item><item><title>《沟通的艺术》</title><link>https://chenhaoqing.github.io/posts/booknotes/2023/%E6%B2%9F%E9%80%9A%E7%9A%84%E8%89%BA%E6%9C%AF/</link><pubDate>Thu, 23 Feb 2023 23:03:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/booknotes/2023/%E6%B2%9F%E9%80%9A%E7%9A%84%E8%89%BA%E6%9C%AF/</guid><description>基本信息 《沟通的艺术》
作者: 盛安之
出版社: 江西美术出版社
副标题: 顺畅有温度的高情商谈话术
出版年: 2017-5-1
ISBN: 9787548042624
读后感 评分：1分（满分5分）
泛泛而谈，通过各种虚拟的小故事来传递作者希望的”沟通艺术“，但实际可参考应用的并不多（仅指对于我自己）。
摘抄记录 所有沟通技巧都离不开沟通之道：真正地在意对方，将对方放在你心上
几个沟通技巧
选择积极的用词与方式； “非常感谢您耐心听我这么长时间的介绍” 擅用“我”代替“你”，擅用“我们”代替“我” 针对不同的沟通对象采取不同的沟通态度； 上司、下属、亲人、朋友，不同策略 沟通中要肯定对方的内容，不仅仅说一些敷衍的话 为了使说话更加简练明确，有时只让对方迅速听到最重要的东西即可。在使用细节作为论据时一定要保证观点突出，不要有过多的观点。确保只有少量的主要观点，或者仅仅是一个主要观点，然后围绕这个观点把要讲的话讲明白。
想指责别人时，学会说“如果我是你”
有效倾听首先应该是用心地聆听对方的谈话，不仅要听，更要听得清、听得懂。
“模拟幽默法”，就是把大家熟悉的原本的语言情境，移置新意，与原意形成对照，从而产生不协调之趣，造成幽默感。</description></item><item><title>《蛇口，梦开始的地方》</title><link>https://chenhaoqing.github.io/posts/booknotes/2023/%E8%9B%87%E5%8F%A3%E6%A2%A6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/</link><pubDate>Mon, 13 Feb 2023 23:31:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/booknotes/2023/%E8%9B%87%E5%8F%A3%E6%A2%A6%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/</guid><description>基本信息 《蛇口，梦开始的地方》
作者: 许永军 / 刘伟
出版社: 人民日报出版社
副标题: 致敬改革开放40年 出版年: 2018-9
ISBN: 9787511555151
读后感 评分：2分（满分5分）
以在蛇口试验区发生的，或与蛇口试验区相关的人物、事件为故事背景，结合历史环境、事态发展及结果，重点突出蛇口敢为人先、大胆突破的气质，进而用于致敬改革开放。
摘抄记录 蛇口试验区的主要领导者，袁庚
1978年6月3日，港澳经济考察团就《港澳经济考察报告（汇报提纲）》向中央政治局进行汇报。报告中认为港澳发展迅速的原因有五：
有充裕的资金来源 有较为廉价的劳动力 购进原材料和技术设备比较方便 比较方便发展对外加工工业，利用外来资金和本地廉价劳动力进口设备、原材料和半成品，然后加工出口 产品适应性强 “时间就是金钱，效率就是生命，顾客就是皇帝，安全就是法律。事事有人管，人人有事管” &amp;mdash; 1981年，袁庚提出用于激励大家的精神口号，后来被精简为“时间就是金钱，效率就是生命”
为了激励运泥车司机多运多干，在蛇口首次实行了定额超产奖励&amp;mdash;“四分钱奖金”
当时承包方的施工队是国有的，沿袭的是“大锅饭”方式，搞平均主义，工人干劲不足。四航局车队长亲自试车，在一般工作状态下，一天拉四五十车没问题。所以最后定额55车的指标，工人每天完成55车定额，每车奖励两分钱；超出55车，每车奖励四分钱。
“不讲多劳多得，不重视物质利益，对少数先进分子可以，对广大群众不行，一段时间可以，长期不行” &amp;mdash; 邓小平在1928年12月13日中央一次会议上所做报告中的话。
懒汉是管不好企业的，无知也不会出高效率
任何一个有能力的人拒绝反思，都将使我们整个民族失去一次改进的微小的机会。
“如果一艘船不知道该驶去哪个港口，那么任何方向吹来的风都不会是顺风” &amp;ndash;《塔木德》</description></item><item><title>《互联网+》</title><link>https://chenhaoqing.github.io/posts/booknotes/2023/%E4%BA%92%E8%81%94%E7%BD%91+/</link><pubDate>Sun, 15 Jan 2023 23:39:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/booknotes/2023/%E4%BA%92%E8%81%94%E7%BD%91+/</guid><description>基本信息 《互联网+》
作者: 马化腾
出版社: 中信出版社
副标题: 国家战略行动路线图
出版年: 2015-5-1
ISBN: 9787508651781
读后感 评分：1分（满分5分）
本书针对“互联网+”这一话题展开了分析和讨论，核心观点就是：各行各业（本书至少提到了制造业、电力系统、教育、健康、媒体、社会公益）要在互联网的大趋势下主动拥抱互联网。书中有超大篇幅是在宣讲腾讯自家的战略以及各产品理念。
可能是在2023年才阅读这本2015年就已出版书的缘故，感觉能得到启发的东西较少；再加上书中更多的是腾讯产品的介绍内容，影响了我的评分。
摘抄记录 在“互联网+”的实践前行路上，在创新方向的选择上，形容词比名词更重要。
而在创新的落地上，名词又比形容词更重要。
还处于发育期的中国创客，有望给中国创新带来三种东西：潜力无穷的产品、致力创新的精神、开放共享的态度。
物联网的物物相连有两层意思：其一，物联网的核心和基础仍然是互联网，是在互联网基础上的延伸和扩展的网络；其二，用户端延伸和扩展到了任何物品与物品之间，进行信息交换和通信。
张小龙在成立微信事业群时写给下属的一封内部邮件中的7个价值观
做对用户有价值的事情 保持我们自身的价值观，因为它会体现在我们产品和服务中 保持小团队，保持敏捷 学习和快速迭代比过去的经验更重要 系统思维 让用户带来用户，口碑赢得口碑 思辨胜于执行 开发不可以为了炫技而展示功能，产品不可以为了炫耀而堆砌功能。
坏的产品提供产品说明书，其恶劣程度与文字说明数量正相关。
在琳琅满目的娱乐消费面前，决定人们选择的最大驱动力就是IP，就是那个你在某个领域已经非常熟悉，但在另一领域却感觉陌生而又好奇的东西。
官方对“互联网+”的定义：“互联网+”是把互联网的创新成果与经济社会各领域深度融合，推动技术进步、效率提升和组织变革，提升实体经济创新力和生产力，形成更广泛的以互联网为基础设施和创新要素的经济社会发展新形态。
马化腾对“互联网+”的定义：“互联网+”是以互联网平台为基础，利用信息通信技术与各行业的跨界融合，推动产业转型升级，并不断创造出新产品、新业务与新模式，构建连接一切的新生态。
通用电气软件和分析业务全球总裁比尔·鲁认为，目前工业互联网至少还面临三大挑战：
传统技术难以支撑的数据处理和管理能力 如何将海量数据转化为有效服务提供给客户 物理世界和软件世界的更好融合 能赚取丰厚利润的垄断企业都发现了独有的秘密，解决了独一无二的问题。</description></item><item><title>删除有序数组中的重复项</title><link>https://chenhaoqing.github.io/posts/leetcode/26_%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</link><pubDate>Wed, 02 Nov 2022 22:13:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/leetcode/26_%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</guid><description>题目 难度：简单
描述 给你一个升序排列的数组nums，请你原地删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。
由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有k个元素，那么nums的前k个元素应该保存最终结果。
将最终结果插入nums的前k个位置后返回k。
不要使用额外的空间，你必须在原地修改输入数组,并在使用 O(1) 额外空间的条件下完成。
示例 示例 1:
输入：nums = [1,1,2]
输出：2, nums = [1,2,_]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
示例 2：
输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
解题思路 由于输入的是升序数组，通过比较双指针P与Q所指向的值是否相同
若相同，则移动Q指针 若不同，则将Q的值填入到P+1的位置 因为是升序数组，Q必定已遍历过P+1的位置，且由于与P或之前的元素值重复 我的题解 class Solution { public int removeDuplicates(int[] nums) { int smooth = 0; int fast = smooth + 1; while (fast &amp;lt; nums.</description></item><item><title>最大层内元素和</title><link>https://chenhaoqing.github.io/posts/leetcode/1161_%E6%9C%80%E5%A4%A7%E5%B1%82%E5%86%85%E5%85%83%E7%B4%A0%E5%92%8C/</link><pubDate>Sun, 31 Jul 2022 22:41:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/leetcode/1161_%E6%9C%80%E5%A4%A7%E5%B1%82%E5%86%85%E5%85%83%E7%B4%A0%E5%92%8C/</guid><description>题目 难度：中等
描述 给你一个二叉树的根节点 root。设根节点位于二叉树的第 1 层，而根节点的子节点位于第 2 层，依此类推。
请返回层内元素之和 最大 的那几层（可能只有一层）的层号，并返回其中 最小 的那个。
示例 示例 1:
输入：root = [1,7,0,7,-8,null,null]
输出：2
解释：
第 1 层各元素之和为 1，
第 2 层各元素之和为 7 + 0 = 7，
第 3 层各元素之和为 7 + -8 = -1，
所以我们返回第 2 层的层号，它的层内元素之和最大。
解题思路 利用深度优先搜索的思路遍历二叉树，在遍历的过程中借助数组sums存储各层的和，数组的下标即为层号 - 1（因为题目层号从1开始）。遍历二叉树后，在sums中找到最大值对应的下标。 注意，因为题目要找层号最小的，所以在找sums最大值时要使用&amp;gt;而不是&amp;gt;=。
我的题解 class Solution { private List&amp;lt;Integer&amp;gt; sums = new ArrayList&amp;lt;&amp;gt;(); public int maxLevelSum(TreeNode root) { traverse(root, 0); int minLvl = 0; for (int lvl = 0; lvl &amp;lt; sums.</description></item><item><title>猜数字大小</title><link>https://chenhaoqing.github.io/posts/leetcode/374_%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</link><pubDate>Sat, 16 Jul 2022 00:10:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/leetcode/374_%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/</guid><description>题目 难度：简单
描述 猜数字游戏的规则如下：
每轮游戏，我都会从1到n随机选择一个数字。 请你猜选出的是哪个数字。 如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。 你可以通过调用一个预先定义好的接口int guess(int num)来获取猜测结果，返回值一共有3种可能的情况（-1，1或0）：
-1：我选出的数字比你猜的数字小 pick &amp;lt; num 1：我选出的数字比你猜的数字大 pick &amp;gt; num 0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick == num 返回我选出的数字。 示例 示例 1:
输入：n = 10, pick = 6
输出：6
示例 2：
输入：n = 1, pick = 1
输出：1
解题思路 通过二分查找不断缩减范围，直至找到最终结果。
关键点 一开始提交的为下面的版本，多个用例都出现超出时间限制。
public class Solution extends GuessGame { public int guessNumber(int n) { int left = 1; int right = n; while (left &amp;lt; right) { int mid = (right + left) / 2; if (guess(mid) == -1) { right = mid - 1; } else if (guess(mid) == 1) { left = mid + 1; } else { return mid; } } return left; } } 参考了官方题解后发觉，(right + left)可能会导致超出int的范围，需要转换为left + (right - left)。</description></item><item><title>每日温度</title><link>https://chenhaoqing.github.io/posts/leetcode/739_%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</link><pubDate>Sun, 03 Jul 2022 23:43:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/leetcode/739_%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</guid><description>题目 难度：中等
描述 给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。
示例 示例 1:
输入: temperatures = [73,74,75,71,69,72,76,73]
输出: [1,1,4,2,1,1,0,0]
示例 2：
输入: temperatures = [30,40,50,60]
输出: [1,1,1,0]
示例 3:
输入: temperatures = [30,60,90]
输出: [1,1,0]
解题思路 暴力法 题目是求下一个更高温度是出现在几天后；因此，针对数组中的每一个元素，遍历其之后的所有元素，找到第一个比其更高的温度后，两者的数组下标差值即为答案。
单调栈 可以观察得知，假如有元素从左到右为A-&amp;gt;B-&amp;gt;C。如果C的值比B小，则C必不可能为比A值大的第一个元素（因为在其左边的B也会比A值大）。因此，在遍历数组的过程中，可以利用此特性，借用栈实现单调递减栈，减少比较的次数。
具体实现方式为：将新遍历到的数组元素A与栈顶元素B（栈中实际存储数组的下标，比较时需要转换为数组中的实际元素值）做大小比较。
如果A &amp;gt; B的大，则表明A为比B值更大的第一个元素；求两者的数组下标差值即可。并将B出栈，持续比较A与B的大小关系，直到栈为空或者A &amp;lt;= B为止 如果A &amp;lt;= B，则表明还未找到比B大的第一个元素，需要将A入栈，遍历下一个数组元素 我的题解 暴力法 class Solution { public int[] dailyTemperatures(int[] temperatures) { int[] ans = new int[temperatures.</description></item><item><title>操作后的最大异或和</title><link>https://chenhaoqing.github.io/posts/leetcode/2317_%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C/</link><pubDate>Sat, 02 Jul 2022 11:43:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/leetcode/2317_%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C/</guid><description>题目 难度：中等
描述 给你一个下标从0开始的整数数组nums。一次操作中，选择任意非负整数x和一个下标i，更新nums[i]为nums[i] AND (nums[i] XOR x)。
注意，AND是逐位与运算，XOR是逐位异或运算。
请你执行任意次更新操作，并返回nums中所有元素最大逐位异或和。
示例 示例 1:
输入：nums = [3,2,4,6]
输出：7
解释：选择 x = 4 和 i = 3 进行操作，num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2 。
现在，nums = [3, 2, 4, 2] 且所有元素逐位异或得到 3 XOR 2 XOR 4 XOR 2 = 7 。
可知 7 是能得到的最大逐位异或和。
注意，其他操作可能也能得到逐位异或和 7 。
示例 2：
输入：nums = [1,2,3,9,2]</description></item><item><title>一维数组的动态和</title><link>https://chenhaoqing.github.io/posts/leetcode/1480_%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%8A%A8%E6%80%81%E5%92%8C/</link><pubDate>Sat, 02 Jul 2022 10:59:00 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/leetcode/1480_%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%8A%A8%E6%80%81%E5%92%8C/</guid><description>题目 难度：简单
描述 给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。
请返回 nums 的动态和。
示例 示例 1：
输入：nums = [1,2,3,4]
输出：[1,3,6,10]
解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4] 。
示例 2：
输入：nums = [1,1,1,1,1]
输出：[1,2,3,4,5]
解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1] 。
示例 3：
输入：nums = [3,1,2,10,1]
输出：[3,4,6,16,17]
我的题解 class Solution { public int[] runningSum(int[] nums) { int[] sums = new int[nums.length]; sums[0] = nums[0]; for (int i = 1; i &amp;lt; nums.</description></item><item><title>对象的存储位置</title><link>https://chenhaoqing.github.io/posts/onjava/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/</link><pubDate>Thu, 09 Jun 2022 00:26:32 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/onjava/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE/</guid><description>数据存储的位置 常见共有如下5种数据存储的方式：
寄存器，数据保存在中央处理器（即CPU），数量有限，速度最快；在Java中无法直接控制寄存器的分配；C和C++允许程序向编译器申请分配寄存器。 栈，数据存储在RAM里，处理器可以通过栈指针直接操作数据。将栈指针向下移动将申请一块新的内存，向上移动则会释放这块内存；效率仅次于寄存器。对于Java而言，存储在栈上的对象，需要明确生命周期。 堆，使用的也是RAM空间，用于存放所有Java对象。编译器不关心存储在堆上的对象的存活时间。 常量存储，常量通常直接保存在程序代码中；在某些嵌入式系统里，会保存在只读存储器（ROM）中。 非RAM存储，针对数据不依赖于英语程序是否运行的情况，比如以文件的方式存储在磁盘。 Java基本类型 在Java中，只能通过new在堆上创建对象。但是，基本类型无须使用new来创建，Java是直接创建一个“自动变量”，并在栈上保存它的值。
占用空间大小 基本类型 大小 boolean - char 16位 byte 8位 short 16位 int 32位 long 64位 float 32位 double 64位 void - 上述表格中所有数值类型都是有符号的。 额外强调:boolean类型的空间大小没有明确标出，其对象只能被赋值为true或false。</description></item><item><title>Java访问控制</title><link>https://chenhaoqing.github.io/posts/onjava/java%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link><pubDate>Sat, 04 Jun 2022 23:57:25 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/onjava/java%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid><description>访问修饰符 Java提供了3个显式关键字来完成访问控制，即public、private以及protected。
public，表示定义的内容可以被所有人访问 private，表示定义的内容只能被雷的创建者通过该类自身的方法访问，而其他任何人都无法访问 protected，类似于private，区别在于继承的子类可以访问protected成员，但不可以访问private成员 包访问 如果不使用上述访问修饰符，Java会提供一种“默认”访问权限，通常叫作“包访问”。
包访问，一个类可以访问同一个包里的其他类；但是如果从包外部访问这些类的话，它们就像private内容一样不可访问。</description></item><item><title>First Post!</title><link>https://chenhaoqing.github.io/posts/introduction/</link><pubDate>Fri, 13 May 2022 23:16:25 +0800</pubDate><guid>https://chenhaoqing.github.io/posts/introduction/</guid><description>这是依据指引一步步操作完成后，所发出的第一篇博客，在此记录下。</description></item></channel></rss>